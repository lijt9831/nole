<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">

	<util:properties id="rab" location="classpath*:env/rabbit.properties" />

	<bean id="connectionFactory"
		class="org.springframework.amqp.rabbit.connection.CachingConnectionFactory">
		<property name="host" value="#{rab['rabbit.host']}" />
		<property name="username" value="#{rab['rabbit.username']}" />
		<property name="password" value="#{rab['rabbit.password']}" />
		<property name="virtualHost" value="#{rab['rabbit.virtualHost']}" />
		<!-- 缓存模式 CONNECTION CHANNEL，默认的缓存模式是CHANNEL。 缓存模式 CHANNEL,connection 是单例的 
			当缓存模式是 CONNECTION时(Cache connections and channels within each connection), 
			队列的自动声明等等 (参考 the section called “Automatic Declaration of Exchanges, Queues 
			and Bindings”) 将不再支持。 在框架(如． RabbitTemplate) 中使用的通道将会可靠地返回到缓存中.如果在框架外创建了通道 
			(如.直接访问connection(s)并调用 createChannel() ), 你必须可靠地返回它们(通过关闭),也许需要在 finally 
			块中以防止耗尽通道. -->
		<property name="cacheMode" value="#{rab['rabbit.cacheMode']}" />

		<!-- 默认通道缓存25,多线程环境中，较小的缓存意味着通道的创建和关闭将以很高的速率运行.加大默认缓存大小可避免这种开销 如果达到了限制,调用线程将会阻塞，直到某个通道可用或者超时, 
			在后者的情况中，将抛出 AmqpTimeoutException异常. -->
		<property name="channelCacheSize" value="#{rab['rabbit.channelCacheSize']}" />

		<!-- channelCheckoutTimeout属性. 当此属性的值大于０时（毫秒）， channelCacheSize会变成连接上创建通道数目的限制. -->
		<property name="channelCheckoutTimeout" value="#{rab['rabbit.channelCheckoutTimeout']}" />

		<!-- connectionLimit 1.5.5 新增，会限制连接的总数目,当达到限制值时，将 channelCheckoutTimeLimit 
			来等待空闲连接.如果时间超时了，将抛出 AmqpTimeoutException -->
		<property name="connectionLimit" value="#{rab['rabbit.connectionLimit']}" />
	</bean>
	
</beans>
